/* ruribitaki.vapi generated by valac 0.28.0, do not modify. */

namespace Ruribitaki {
	[CCode (cheader_filename = "ruribitaki.h")]
	[Compact]
	public class Account {
		public Rest.OAuthProxy api_proxy;
		public int64 id;
		public string profile_image_url;
		public string screen_name;
		public Rest.OAuthProxy stream_proxy;
		public string time_zone;
		public Account (string consumer_key, string consumer_seclet);
	}
	[CCode (cheader_filename = "ruribitaki.h")]
	public class ParsedJsonObj {
		public GLib.DateTime created_at;
		public GLib.DateTime event_created_at;
		public Ruribitaki.EventType? event_type;
		public int64 favorite_count;
		public bool favorited;
		public Ruribitaki.hashtag[] hashtags;
		public string id_str;
		public string? in_reply_to_status_id_str;
		public bool is_mine;
		public Ruribitaki.url[] media;
		public int64 retweet_count;
		public bool retweeted;
		public string? retweeted_status_id_str;
		public string source_label;
		public string source_url;
		public Ruribitaki.User sub_user;
		public string text;
		public Ruribitaki.TweetType tweet_type;
		public Ruribitaki.ParsedJsonObjType type;
		public Ruribitaki.url[] urls;
		public Ruribitaki.User user;
		public ParsedJsonObj (Json.Node? json_node, string? my_screen_name);
		public ParsedJsonObj.from_string (string json_str, string? screen_name);
	}
	[CCode (cheader_filename = "ruribitaki.h")]
	[Compact]
	public class User {
		public int64 id;
		public string id_str;
		public bool is_protected;
		public string name;
		public string profile_image_url;
		public string screen_name;
		public User ();
	}
	[CCode (cheader_filename = "ruribitaki.h")]
	public class UserStream {
		public UserStream (Ruribitaki.Account account);
		public void run ();
		public signal void callback_error (GLib.Error e);
		public signal void callback_json (Ruribitaki.ParsedJsonObj parsed_json_obj);
	}
	[CCode (cheader_filename = "ruribitaki.h")]
	public struct hashtag {
		public int[] indices;
		public string text;
	}
	[CCode (cheader_filename = "ruribitaki.h")]
	public struct url {
		public string display_url;
		public string expanded_url;
		public int[] indices;
		public string media_url;
		public string media_url_https;
		public string url;
	}
	[CCode (cheader_filename = "ruribitaki.h")]
	public enum EventType {
		ACCESS_REVOKED,
		BLOCK,
		UNBLOCK,
		FAVORITE,
		UNFAVORITE,
		FOLLOW,
		UNFOLLOW,
		LIST_CREATED,
		LIST_DESTROYED,
		LIST_UPDATED,
		LIST_MEMBER_ADDED,
		LIST_MEMBER_REMOVED,
		LIST_USER_SUBSCRIBED,
		LIST_USER_UNSUBSCRIBED,
		USER_UPDATE,
		NULL
	}
	[CCode (cheader_filename = "ruribitaki.h")]
	public enum ParsedJsonObjType {
		DELETE,
		EVENT,
		FRIENDS,
		NULL,
		RETWEET,
		TWEET
	}
	[CCode (cheader_filename = "ruribitaki.h")]
	public enum TweetType {
		NORMAL,
		NULL,
		REPLY
	}
	[CCode (cheader_filename = "ruribitaki.h")]
	public static bool account_verify_credential (Ruribitaki.Account account);
	[CCode (cheader_filename = "ruribitaki.h")]
	public static async bool favorites_create (Ruribitaki.Account account, string id_str);
	[CCode (cheader_filename = "ruribitaki.h")]
	public static async bool favorites_destroy (Ruribitaki.Account account, string id_str);
	[CCode (cheader_filename = "ruribitaki.h")]
	public static bool oauth_access_token (Ruribitaki.Account account, string pin_code);
	[CCode (cheader_filename = "ruribitaki.h")]
	public static string? request_token (Ruribitaki.Account account);
	[CCode (cheader_filename = "ruribitaki.h")]
	public static async bool statuses_destroy (Ruribitaki.Account account, string id_str);
	[CCode (cheader_filename = "ruribitaki.h")]
	public static GLib.Array<Ruribitaki.ParsedJsonObj> statuses_home_timeline (Ruribitaki.Account account, int count);
	[CCode (cheader_filename = "ruribitaki.h")]
	public static GLib.Array<Ruribitaki.ParsedJsonObj> statuses_mention_timeline (Ruribitaki.Account account, int count);
	[CCode (cheader_filename = "ruribitaki.h")]
	public static async bool statuses_retweet (Ruribitaki.Account account, string id_str);
	[CCode (cheader_filename = "ruribitaki.h")]
	public static async Ruribitaki.ParsedJsonObj? statuses_show (Ruribitaki.Account account, string id_str);
	[CCode (cheader_filename = "ruribitaki.h")]
	public static async bool statuses_update (Ruribitaki.Account account, string status, string? in_reply_to_status_id_str);
}
